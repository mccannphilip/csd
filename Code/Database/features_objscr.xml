<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for Windows (x86-64) 2016.2.1 (Build 803_1U)" ts="2018-09-01 21:46:20">
<Class name="csd.Features">
<Super>%Persistent</Super>
<TimeChanged>64882,75336.643929</TimeChanged>
<TimeCreated>64652,73696.126726</TimeCreated>

<Property name="ContactID">
<Type>%Integer</Type>
</Property>

<Index name="idxUnique">
<Type>index</Type>
<Properties>ContactID</Properties>
<Unique>1</Unique>
</Index>

<Property name="CustomerID">
<Type>%Integer</Type>
</Property>

<Index name="idxCustomer">
<Type>bitmap</Type>
<Properties>CustomerID</Properties>
</Index>

<Property name="MailFrom">
<Type>%String</Type>
<Parameter name="COLLATION" value="SQLUPPER(255)"/>
<Parameter name="MAXLEN" value="255"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="MailTo">
<Type>%String</Type>
<Parameter name="COLLATION" value="SQLUPPER(255)"/>
<Parameter name="MAXLEN" value="255"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Mailbox">
<Type>%String</Type>
<Parameter name="COLLATION" value="SQLUPPER(255)"/>
<Parameter name="MAXLEN" value="255"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Subject">
<Type>%String</Type>
<Parameter name="COLLATION" value="SQLUPPER(255)"/>
<Parameter name="MAXLEN" value="255"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Body">
<Type>%String</Type>
<Parameter name="COLLATION" value="SQLUPPER(255)"/>
<Parameter name="MAXLEN" value="4000"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Skillset">
<Type>%String</Type>
<Parameter name="COLLATION" value="SQLUPPER(50)"/>
<Parameter name="MAXLEN" value="50"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="ClosedReason">
<Type>%String</Type>
<Parameter name="COLLATION" value="SQLUPPER(50)"/>
<Parameter name="MAXLEN" value="50"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="TransferCount">
<Type>%Integer</Type>
</Property>

<Property name="FirstTransferID">
<Type>%Integer</Type>
</Property>

<Property name="LastTransferID">
<Type>%Integer</Type>
</Property>

<Property name="FirstSkillset">
<Type>%String</Type>
<Parameter name="COLLATION" value="SQLUPPER(50)"/>
<Parameter name="MAXLEN" value="50"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="LastSkillset">
<Type>%String</Type>
<Parameter name="COLLATION" value="SQLUPPER(50)"/>
<Parameter name="MAXLEN" value="50"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="SkillsetID">
<Type>%Integer</Type>
</Property>

<Property name="FirstSkillsetID">
<Type>%Integer</Type>
</Property>

<Property name="LastSkillsetID">
<Type>%Integer</Type>
</Property>

<Property name="QueueType">
<Type>%String</Type>
<Parameter name="COLLATION" value="SQLUPPER(50)"/>
<Parameter name="MAXLEN" value="50"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="FollowUp">
<Type>%Integer</Type>
</Property>

<Property name="AgentReply">
<Type>%Integer</Type>
</Property>

<Property name="OpenDuration">
<Type>%Integer</Type>
</Property>

<Property name="Prediction">
<Type>%String</Type>
<Parameter name="COLLATION" value="SQLUPPER(50)"/>
<Parameter name="MAXLEN" value="50"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="RuleID">
<Type>%Integer</Type>
</Property>

<Property name="MessageBody">
<Type>%String</Type>
<Parameter name="COLLATION" value="SQLUPPER(255)"/>
<Parameter name="MAXLEN" value="4000"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="MessageClean">
<Type>%String</Type>
<Parameter name="COLLATION" value="SQLUPPER(255)"/>
<Parameter name="MAXLEN" value="4000"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="MessageCleanTagged">
<Type>%String</Type>
<Parameter name="COLLATION" value="SQLUPPER(255)"/>
<Parameter name="MAXLEN" value="4000"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="MessageTagged">
<Type>%String</Type>
<Parameter name="COLLATION" value="SQLUPPER(255)"/>
<Parameter name="MAXLEN" value="4000"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Index name="idxSkillsetID">
<Type>bitmap</Type>
<Properties>SkillsetID</Properties>
</Index>

<Index name="idxFirstSkillsetID">
<Type>bitmap</Type>
<Properties>FirstSkillsetID</Properties>
</Index>

<Index name="idxLastSkillsetID">
<Type>bitmap</Type>
<Properties>LastSkillsetID</Properties>
</Index>

<Index name="idxSkillset">
<Data>Skillset</Data>
<Properties>Skillset</Properties>
</Index>

<Index name="idxFirstSkillset">
<Data>FirstSkillset</Data>
<Properties>FirstSkillset</Properties>
</Index>

<Index name="idxLastSkillset">
<Data>LastSkillset</Data>
<Properties>LastSkillset</Properties>
</Index>

<Index name="idxQueueType">
<Type>index</Type>
<Properties>QueueType</Properties>
</Index>

<Index name="idxFollowUp">
<Type>index</Type>
<Properties>FollowUp</Properties>
</Index>

<Index name="idxMailboxSkillset">
<Type>index</Type>
<Properties>Mailbox,Skillset</Properties>
</Index>

<Index name="idxRuleID">
<Type>bitmap</Type>
<Properties>RuleID</Properties>
</Index>

<Property name="Spam">
<Type>%String</Type>
<Parameter name="COLLATION" value="SQLUPPER(255)"/>
<Parameter name="MAXLEN" value="255"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="MailToCount">
<Type>%Integer</Type>
</Property>

<Property name="MailCCCount">
<Type>%Integer</Type>
</Property>

<Property name="AttachmentCount">
<Type>%Integer</Type>
</Property>

<Property name="Importance">
<Type>%Integer</Type>
</Property>

<Property name="NewCustomer">
<Type>%Integer</Type>
</Property>

<Property name="ArrivalTime">
<Type>%Integer</Type>
</Property>

<Index name="idxArrivalTime">
<Properties>ArrivalTime</Properties>
</Index>

<Property name="SpamOverride">
<Type>%String</Type>
<Parameter name="COLLATION" value="SQLUPPER(255)"/>
<Parameter name="MAXLEN" value="255"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Method name="SaveMeArff">
<Description>
do ##class(csd.Routines).SaveToArff()</Description>
<FormalSpec>includeChain:%Boolean=0</FormalSpec>
<Implementation><![CDATA[
	set file = ##class(%FileBinaryStream).%New()
	set dir = ##class(%File).NormalizeDirectory("c:\tmp\csd\")

	if (..ClosedReason = "Spam")
	{
		set cat = "Spam"
	}
	else
	{
		set cat = ..Skillset
	}

	do ##class(%File).CreateDirectoryChain(dir _ cat)
	set file.Filename = dir _ cat _ "\" _ ..ContactID _ ".txt"
	do file.WriteLine("@attribute from " _ ..MailFrom)
	do file.WriteLine("@attribute to " _ ..Mailbox)
	do file.WriteLine("@attribute subject " _ ..Subject)
	do file.WriteLine("")
	do file.WriteLine("@data")
	if (includeChain = 0)
	{
		do file.Write(..Body)
	}
	else
	{
		do file.Write(..Body)
	}
	set st = file.SaveStream()
	set rc = file.%Close()
]]></Implementation>
</Method>

<Method name="SaveMeTxt">
<Description>
do ##class(csd.Routines).SaveToTxt()</Description>
<FormalSpec>includeChain:%Boolean=0,path=""</FormalSpec>
<Implementation><![CDATA[
	set file = ##class(%FileBinaryStream).%New()
	set dir = ##class(%File).NormalizeDirectory("c:\tmp\csd\mail\" _ path)
	do ##class(%File).CreateDirectoryChain(dir)

	//set cat = "NoReply"
	//if (..AgentReply > 0)
	//{
	//	set cat = "Reply"
	//}
	
	//set cat = ..Skillset
	set cat = "NoSpam"
	if (..ClosedReason = "Spam")
	{
		set cat = "Spam"
	}

	//set originalSkillset = ""
	//if (..FirstSkillset '= "")
	//{
	//	set originalSkillset = "%" _..FirstSkillset
	//}
	
	set file.Filename = dir _ cat _ "%"  _ ..ContactID _ ".txt"
	//do file.WriteLine("from: " _ ..MailFrom)
	//do file.WriteLine("to: " _ ..Mailbox)
	do file.WriteLine(..Subject)
	do file.WriteLine("")
	//if ($length(..MessageBody) > 0)
	//{
	//	do file.Write(..MessageBody)
	//}
	//else
	//{
		do file.Write(..Body)
	//}
	set st = file.SaveStream()
	set rc = file.%Close()
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^csd.FeaturesD</DataLocation>
<DefaultData>FeaturesDefaultData</DefaultData>
<IdLocation>^csd.FeaturesD</IdLocation>
<IndexLocation>^csd.FeaturesI</IndexLocation>
<StreamLocation>^csd.FeaturesS</StreamLocation>
<Data name="FeaturesDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>ContactID</Value>
</Value>
<Value name="3">
<Value>MailFrom</Value>
</Value>
<Value name="4">
<Value>MailTo</Value>
</Value>
<Value name="5">
<Value>Subject</Value>
</Value>
<Value name="6">
<Value>Body</Value>
</Value>
<Value name="7">
<Value>Skillset</Value>
</Value>
<Value name="8">
<Value>TransferCount</Value>
</Value>
<Value name="9">
<Value>FirstTransferID</Value>
</Value>
<Value name="10">
<Value>LastTransferID</Value>
</Value>
<Value name="11">
<Value>FollowUp</Value>
</Value>
<Value name="12">
<Value>QueueType</Value>
</Value>
<Value name="13">
<Value>FirstSkillset</Value>
</Value>
<Value name="14">
<Value>LastSkillset</Value>
</Value>
<Value name="15">
<Value>Prediction</Value>
</Value>
<Value name="16">
<Value>CustomerID</Value>
</Value>
<Value name="17">
<Value>SkillsetID</Value>
</Value>
<Value name="18">
<Value>FirstSkillsetID</Value>
</Value>
<Value name="19">
<Value>LastSkillsetID</Value>
</Value>
<Value name="20">
<Value>Mailbox</Value>
</Value>
<Value name="21">
<Value>ClosedReason</Value>
</Value>
<Value name="22">
<Value>RuleID</Value>
</Value>
<Value name="23">
<Value>AgentReply</Value>
</Value>
<Value name="24">
<Value>OpenDuration</Value>
</Value>
<Value name="25">
<Value>MessageBody</Value>
</Value>
<Value name="26">
<Value>Spam</Value>
</Value>
<Value name="27">
<Value>MessageClean</Value>
</Value>
<Value name="28">
<Value>MailToCount</Value>
</Value>
<Value name="29">
<Value>MailCCCount</Value>
</Value>
<Value name="30">
<Value>MessageCleanTagged</Value>
</Value>
<Value name="31">
<Value>NewCustomer</Value>
</Value>
<Value name="32">
<Value>ArrivalTime</Value>
</Value>
<Value name="33">
<Value>MessageTagged</Value>
</Value>
<Value name="34">
<Value>AttachmentCount</Value>
</Value>
<Value name="35">
<Value>Importance</Value>
</Value>
<Value name="36">
<Value>SpamOverride</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="csd.Routines">
<Super>%RegisteredObject</Super>
<TimeChanged>64890,68027.718824</TimeChanged>
<TimeCreated>64652,40765.334715</TimeCreated>

<Method name="SpamOnly">
<Description>
Export the subject and body information for contacts labelled Spam
Identify the Spam clusters to help identify noisy labels - Spam that was not tagged
do ##class(csd.Routines).SpamOnly()</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set dir = ##class(%File).NormalizeDirectory("c:\tmp\csd\" _ $zdate($horolog, 3) _ " - Cluster")
	do ##class(%File).CreateDirectoryChain(dir)

	set train = ##class(%FileBinaryStream).%New()
	set train.Filename = dir _ "\train_spam_cluster.arff"

	set head = "@relation C__tmp_csd" _ $c(13) _ $c(10) _
		"" _  $c(13) _ $c(10) _
		"@attribute w5 integer" _  $c(13) _ $c(10) _
		"@attribute subject string" _  $c(13) _ $c(10) _
		"@attribute text string" _  $c(13) _ $c(10) _
		"" _  $c(13) _ $c(10) _
		"@data"

	do train.WriteLine(head)

	set sql = "select ID from csd.Features where Spam = 'Spam'"

	set rs = ##class(%Library.ResultSet).%New()
	set st = rs.Prepare(sql)
	set st = rs.Execute()

	set count = 0
	while rs.Next()
	{
		set id = rs.Get("ID")
		set feature = ##class(csd.Features).%OpenId(id)
		if ($length(feature.Body) > 0)
		{
			set text = feature.MessageCleanTagged			
			set text = $zconvert(text, "L")						
			
			set arff = ..toArff(feature.Subject) _ "," _ ..toArff(text)
			do train.WriteLine(arff)
			set count = count + 1
		}
	}

	set st = train.SaveStream()
	set rc = train.%Close()
]]></Implementation>
</Method>

<Method name="SaveNoReplyToArff">
<Description>
Export 3 files: 10000 contacts split 60/40 between training and testing
and a holdout set of 4000
do ##class(csd.Routines).SaveNoReplyToArff()</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>split:%Integer=60,datasetSize:%Integer=10000,name:%String</FormalSpec>
<Implementation><![CDATA[
	set dir = ##class(%File).NormalizeDirectory("c:\tmp\csd\" _ $zdate($horolog, 3) _ " - NoReply - " _ name)
	do ##class(%File).CreateDirectoryChain(dir)
	
	set train = ##class(%FileBinaryStream).%New()
	set train.Filename = dir _ "\train_noreply.arff"

	set test = ##class(%FileBinaryStream).%New()
	set test.Filename = dir _ "\test_noreply.arff"

	set holdout = ##class(%FileBinaryStream).%New()
	set holdout.Filename = dir _ "\holdout_noreply.arff"

	set head = "@relation C__tmp_csd" _ $c(13) _ $c(10) _
		"" _  $c(13) _ $c(10) _
		"@attribute w5 integer" _  $c(13) _ $c(10) _
		"@attribute recipientcount integer" _  $c(13) _ $c(10) _
		"@attribute to string" _  $c(13) _ $c(10) _
		"@attribute subject string" _  $c(13) _ $c(10) _
		"@attribute text string" _  $c(13) _ $c(10) _
		"@attribute textlength integer" _  $c(13) _ $c(10) _
		"@attribute subjectlength integer" _  $c(13) _ $c(10) _
		"@attribute mailimportance integer" _  $c(13) _ $c(10) _
		"@attribute attachmentcount integer" _  $c(13) _ $c(10) _
		"@attribute @@class@@ {Reply,NoReply}" _  $c(13) _ $c(10) _
		"" _  $c(13) _ $c(10) _
		"@data"

	do train.WriteLine(head)
	do test.WriteLine(head)
	do holdout.WriteLine(head)

	set sql = "select ID from csd.Features where len(messagecleantagged) > 4 and id < 200000 and Spam <> 'Spam'"
	set rs = ##class(%Library.ResultSet).%New()
	set st = rs.Prepare(sql)
	set st = rs.Execute()
	
	set count = 0
	while (rs.Next() && (count < datasetSize))
	{
		set id = rs.Get("ID")
		
		set keep = $random(100)
		if (keep < 25)
		{
			set r = $random(100)
			if (r < split)
			{
				set file = train
			}
			else
			{
				set file = test
			}

			set feature = ##class(csd.Features).%OpenId(id)
			set cat = "NoReply"
			if (feature.AgentReply > 0)
			{
				set cat = "Reply"
			}

			set text = feature.MessageCleanTagged			
			set text = $zconvert(text, "L")						
			set w5 = ##class(csd.Routines).parseW5(text)

			// How many recipients (To + CC)
			set recipientCount = feature.MailToCount + feature.MailCCCount
			set len = $length(text)
			set len2 = $length(feature.Subject)
		
			set arff = w5 _ "," _ recipientCount _ "," _ ..toArff("|mailbox|") _ "," 
				_ ..toArff(feature.Subject) _ "," _ ..toArff(text) _ ","
				_ ..toArff(len) _ "," _ ..toArff(len2) _ "," _ ..toArff(feature.Importance) _ ","
				_ ..toArff(feature.AttachmentCount) _ "," _ cat

			do file.WriteLine(arff)
			set count = count + 1
		}
	}

	set hold = datasetSize * (100 - split) / 100

	set sql = "select ID from csd.Features where len(messagecleantagged) > 4 and id > 200000 and Spam <> 'Spam'"
	set rs = ##class(%Library.ResultSet).%New()
	set st = rs.Prepare(sql)
	set st = rs.Execute()
	
	set count = 0
	while (rs.Next()&& (count < hold))
	{
		set id = rs.Get("ID")
		
		set keep = $random(100)
		if (keep < 25)
		{
			set feature = ##class(csd.Features).%OpenId(id)
			set cat = "NoReply"
			if (feature.AgentReply > 0)
			{
				set cat = "Reply"
			}

			set text = feature.MessageCleanTagged			
			set text = $zconvert(text, "L")						
			set w5 = ##class(csd.Routines).parseW5(text)

			// How many recipients (To + CC)
			set recipientCount = feature.MailToCount + feature.MailCCCount
			set len = $length(text)
			set len2 = $length(feature.Subject)
		
			set arff = w5 _ "," _ len _ "," _ ..toArff("|mailbox|") _ "," 
				_ ..toArff(feature.Subject) _ "," _ ..toArff(text) _ ","
				_ ..toArff(len) _ "," _ ..toArff(len2) _ "," _ ..toArff(feature.Importance) _ ","
				_ ..toArff(feature.AttachmentCount) _ "," _ cat

			do holdout.WriteLine(arff)
			set count = count + 1
		}
	}

	set st = train.SaveStream()
	set rc = train.%Close()

	set st = test.SaveStream()
	set rc = test.%Close()

	set st = holdout.SaveStream()
	set rc = holdout.%Close()
]]></Implementation>
</Method>

<Method name="SaveSpamToArff">
<Description>
Export 3 files: 10000 contacts split 60/40 between training and testing
and a holdout set of 4000
do ##class(csd.Routines).SaveSpamToArff()</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>split:%Integer=60,datasetSize:%Integer=10000,name:%String</FormalSpec>
<Implementation><![CDATA[
	set dir = ##class(%File).NormalizeDirectory("c:\tmp\csd\" _ $zdate($horolog, 3) _ " - Spam - " _ name)
	do ##class(%File).CreateDirectoryChain(dir)
	
	set train = ##class(%FileBinaryStream).%New()
	set train.Filename = dir _ "\train_spam.arff"

	set test = ##class(%FileBinaryStream).%New()
	set test.Filename = dir _ "\test_spam.arff"

	set holdout = ##class(%FileBinaryStream).%New()
	set holdout.Filename = dir _ "\holdout_spam.arff"

	set head = "@relation C__tmp_csd" _ $c(13) _ $c(10) _
		"" _  $c(13) _ $c(10) _
		"@attribute followup {0,1}" _  $c(13) _ $c(10) _
		"@attribute recipientcount integer" _  $c(13) _ $c(10) _
		"@attribute to string" _  $c(13) _ $c(10) _
		"@attribute subject string" _  $c(13) _ $c(10) _
		"@attribute text string" _  $c(13) _ $c(10) _
		"@attribute arrivaltime integer" _  $c(13) _ $c(10) _
		"@attribute textlength integer" _  $c(13) _ $c(10) _
		"@attribute subjectlength integer" _  $c(13) _ $c(10) _
		"@attribute mailimportance integer" _  $c(13) _ $c(10) _
		"@attribute attachmentcount integer" _  $c(13) _ $c(10) _
		"@attribute @@class@@ {Spam,NoSpam}" _  $c(13) _ $c(10) _
		"" _  $c(13) _ $c(10) _
		"@data"

	do train.WriteLine(head)
	do test.WriteLine(head)
	do holdout.WriteLine(head)

	set sql = "select ID from csd.Features where len(messagecleantagged) > 4 and id < 200000 "
	set rs = ##class(%Library.ResultSet).%New()
	set st = rs.Prepare(sql)
	set st = rs.Execute()
	
	set count = 0
	while (rs.Next() && (count < datasetSize))
	{
		set id = rs.Get("ID")
		
		set keep = $random(100)
		if (keep < 25)
		{
			set r = $random(100)
			if (r < split)
			{
				set file = train
			}
			else
			{
				set file = test
			}

			set feature = ##class(csd.Features).%OpenId(id)
			set cat = feature.Spam
			set follow = feature.FollowUp

			// Identify SPAM from first 1000 words
			set words = $piece(feature.MessageCleanTagged, " ", 1, 1000)
			set len = $length(feature.MessageCleanTagged)
			set len2 = $length(feature.Subject)
			set arrivaltime = feature.ArrivalTime

			// How many recipients (To + CC)
			set recipientCount = feature.MailToCount + feature.MailCCCount

			set arff = follow _ "," _ recipientCount _ "," _ ..toArff("|mailbox|") _ "," 
				_ ..toArff(feature.Subject) _ "," _ ..toArff(words) _ "," _ arrivaltime _ ","
				_ ..toArff(len) _ "," _ ..toArff(len2) _ "," _ ..toArff(feature.Importance) _ ","
				_ ..toArff(feature.AttachmentCount) _ "," _ cat
	
			do file.WriteLine(arff)
			set count = count + 1
		}
	}

	set hold = datasetSize * (100 - split) / 100

	set sql = "select ID from csd.Features where len(messagecleantagged) > 4 and id > 200000 "
	set rs = ##class(%Library.ResultSet).%New()
	set st = rs.Prepare(sql)
	set st = rs.Execute()
	
	set count = 0
	while (rs.Next()&& (count < hold))
	{
		set id = rs.Get("ID")
		
		set keep = $random(100)
		if (keep < 25)
		{
			set feature = ##class(csd.Features).%OpenId(id)
			set cat = feature.Spam
			set follow = feature.FollowUp

			// Identify SPAM from first 1000 words
			set words = $piece(feature.MessageCleanTagged, " ", 1, 1000)
			set len = $length(feature.MessageCleanTagged)
			set len2 = $length(feature.Subject)
			set arrivaltime = feature.ArrivalTime

			// How many recipients (To + CC)
			set recipientCount = feature.MailToCount + feature.MailCCCount

			set arff = follow _ "," _ recipientCount _ "," _ ..toArff("|mailbox|") _ "," 
				_ ..toArff(feature.Subject) _ "," _ ..toArff(words) _ "," _ arrivaltime _ ","
				_ ..toArff(len) _ "," _ ..toArff(len2) _ "," _ ..toArff(feature.Importance) _ ","
				_ ..toArff(feature.AttachmentCount) _ "," _ cat
	
			do holdout.WriteLine(arff)
			set count = count + 1
		}
	}

	set st = train.SaveStream()
	set rc = train.%Close()

	set st = test.SaveStream()
	set rc = test.%Close()

	set st = holdout.SaveStream()
	set rc = holdout.%Close()
]]></Implementation>
</Method>

<Method name="toArff">
<Description>
Convert a data field for export to ARFF</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>str:%String</FormalSpec>
<Implementation><![CDATA[
	set str = $replace(str, "(", " ")
	set str = $replace(str, ")", " ")
	set str = $replace(str, "{", " ")
	set str = $replace(str, "}", " ")
	set str = $replace(str, "[", " ")
	set str = $replace(str, "]", " ")
	set str = $replace(str, "<", " ")
	set str = $replace(str, ">", " ")
	set str = $replace(str, """", " ")
	set str = $replace(str, "'", " ")
	set str = $replace(str, $C(0), " ")
	set str = $replace(str, $C(9), " ")
	set str = $replace(str, $C(13), " ")
	set str = $replace(str, $C(10), " ")
	set str = $zconvert(str, "L")
	set str = "'" _ str _ "'"
	quit str
]]></Implementation>
</Method>

<Method name="setBodyPart">
<Description>
Update the features table to keep the first 4000 characters
of the email body</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set sql = "select ID from csd.Features"
	set rs = ##class(%Library.ResultSet).%New()
	set st = rs.Prepare(sql)
	set st = rs.Execute()

	set c = 0
	while rs.Next()
	{
		set c = c + 1
		w !, c
		set id = rs.Get("ID")
		set feat = ##class(csd.Features).%OpenId(id)

		set contact = ##class(cls.Contact).%OpenId(feat.ContactID)
		w !, id _ " " _contact.ID
		for i=1:1:contact.Actions.Count()
		{
			set action = contact.Actions.GetAt(i)
			w !, "  " _action.ID
			if (action.Source.NumericValue = 2)
			{
				set feat.Body = action.Text.Read(4000)
				w !, feat.%Save()
				quit
			}
		}
	}
]]></Implementation>
</Method>

<Method name="parseReplyPart">
<Description>
Remove the earlier parts of the conversation from emails so that the 
words from earlier interactions are not used to predict spam or noreply
do ##class(csd.Routines).parseReplyPart()</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id=""</FormalSpec>
<Implementation><![CDATA[
	set sql = "select ID from csd.Features"
	if (id '= "")
	{
		set sql = sql _ " where id = " _ id
	}

	set rs = ##class(%Library.ResultSet).%New()
	set st = rs.Prepare(sql)
	set st = rs.Execute()

	set c = 0
	while rs.Next()
	{
		set c = c + 1
		set id = rs.Get("ID")
		set feat = ##class(csd.Features).%OpenId(id)
		
		set x = 0
		set text = ##class(csd.Routines).parseFeature(feat.MailTo, feat.Body, .x)
		if (x > 0)
		{
			set feat.MessageClean = text
	    	do feat.%Save()
		}
	}
]]></Implementation>
</Method>

<Method name="parseFeature">
<ClassMethod>1</ClassMethod>
<FormalSpec>mailto:%String,text:%String,x:%Integer</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	//set patternLine = "(?is)(.*?)(^.*$)"
	set mailto = ##class(mm.EmailAddress).BuildSearchAddress(mailto, 1)
		
	set parseText = ""
	set x = 0

	set lines = $length(text, $c(13) _ $c(10))
	set startAt = ""
	set endAt = ""
	for i=1:1:lines
	{
		set line = $piece(text, $c(13) _ $c(10), i)
		//w !, feat.ContactID _ " - " _ i _ " of  " _ lines
		if (line = "-- ")
		{
			// Lines that equal '-- \n' (standard email sig delimiter)
			set x = 1
		}
		elseif (line = "--")
		{
			// Lines that equal '--\n' (people often forget the space in sig delimiter; and this is not that common outside sigs)
			set x = 2
		}
		elseif (line [ "-----Original Message-----")
		{
			// Lines that begin with '-----Original Message-----' (MS Outlook default)
			set x = 3
		}
		elseif (line [ "----- Original Message -----")
		{
			// Lines that begin with '-----Original Message-----' (MS Outlook default)
			set x = 3
		}
		elseif (line [ "----- Forwarded Message ----")
		{
			// Lines that begin with '----- Forwarded Message -----' (MS Outlook default)
			set x = 3
		}
		elseif (line [ "________________________________")
		{
			// Lines that begin with '________________________________' (32 underscores, Outlook again)
			set x = 4
		}
		elseif (line [ "In a message dated")
		{
			// Lines that begin with 'In a message dated' (MS Outlook default)
			set x = 3
		}
		elseif ((line [ "On ") && (line [ "wrote:"))
		{
			// Lines that begin with 'On ' and end with ' wrote:\n' (OS X Mail.app default)
			set x = 5
		}
		elseif ($find(line, "From:") = 6)
		{
			// Lines that begin with 'From: ' (failsafe four Outlook and some other reply formats)
			set x = 6
		}
		elseif (line [ "Sent from my iPhone")
		{
			// Lines that begin with 'Sent from my iPhone'
			set x = 7
		}
		elseif (line [ "Sent from my BlackBerry")
		{
			// Lines that begin with 'Sent from my BlackBerry'
			set x = 8
		}
		elseif (line [ "Please include all previous correspondence with your reply")
		{
			// Lines that include 'Please include all previous correspondence with your reply'
			set x = 9
		}
		elseif ((endAt '= "") && (line [ endAt))
		{
			set x = 10
		}
		
		quit:(x>0)
		set parseText = parseText _ $c(13) _ $c(10) _ line
	}

	// Special Cases:
	if (parseText [ "0---------1---------2---------3---------4---------5---------6---------7---------8")
	{
		set x = 11
		set parseText = $piece(text, "CustomerComments:", 2)
		set parseText = $piece(parseText, "0---------1---------2---------3---------4---------5---------6---------7---------8", 1)
		quit parseText
	}

	if (text [ "================ Additional")
	{
		set x = 12
		set parseText = $piece(text, "================ Additional", 2)
		set parseText = $piece(parseText, "Information", 2)
		set parseText = $piece(parseText, "==============", 2)
		set parseText = $piece(parseText, "<**", 1)
		quit parseText
	}
	quit parseText
]]></Implementation>
</Method>

<Method name="parseCleanTags">
<Description>
Use regexp to tag known entities in the email body. Knowing that an email contains a gif, jpg, or url link
is more informative that a specific usrl with a low term frequency
do ##class(csd.Routines).parseCleanTags()</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id=""</FormalSpec>
<Implementation><![CDATA[
	set sql = "select ID from csd.Features where MessageCleanTagged is null "
	if (id '= "")
	{
		set sql = sql _ " where id = " _ id
	}

	set rs = ##class(%Library.ResultSet).%New()
	set st = rs.Prepare(sql)
	set st = rs.Execute()

	set c = 0
	while rs.Next()
	{
		set c = c + 1
		set id = rs.Get("ID")
		set feat = ##class(csd.Features).%OpenId(id)
		
		set text = feat.MessageClean
	    if (text = "")
		{
			set text = feat.Body
		}

		set pattern = "(https?:[\d]{0,5}\/\/(?:www\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]?\.[^\s]{2,}|www\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]?\.[^\s]{2,}|https?:[\d]{0,5}\/\/(?:www\.|(?!www))[a-zA-Z0-9]\.[^\s]{2,}|www\.[a-zA-Z0-9]\.[^\s]{2,})"
		set text = ##class(csd.Routines).parseTag(id, text, pattern, "|URL?|", ".")

		set pattern = "([a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+)"
		set text = ##class(csd.Routines).parseTag(id, text, pattern, "|EMAILADDRESS|")
		
		set pattern = "(((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))"
		set text = ##class(csd.Routines).parseTag(id, text, pattern, "|IPADDRESS|")
		
		set pattern = "(\b\(?([0-9]{3})\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})\b)"
		set text = ##class(csd.Routines).parseTag(id, text, pattern, "|PHONENO|")
			
		set pattern = "(\b(?:(?:31(\/|-|\.)(?:0?[13578]|1[02]|(?:Jan|Mar|May|Jul|Aug|Oct|Dec)))\1|(?:(?:29|30)(\/|-|\.)(?:0?[1,3-9]|1[0-2]|(?:Jan|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec))\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})$|^(?:29(\/|-|\.)(?:0?2|(?:Feb))\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\d|2[0-8])(\/|-|\.)(?:(?:0?[1-9]|(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep))|(?:1[0-2]|(?:Oct|Nov|Dec)))\4(?:(?:1[6-9]|[2-9]\d)?\d{2})\b)"
		set text = ##class(csd.Routines).parseTag(id, text, pattern, "|DATE|")

		set feat.MessageCleanTagged = text
		do feat.%Save()				
	}
]]></Implementation>
</Method>

<Method name="parseTags">
<Description>
do ##class(csd.Routines).parseTags()</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id=""</FormalSpec>
<Implementation><![CDATA[
	set sql = "select ID from csd.Features"
	if (id '= "")
	{
		set sql = sql _ " where id = " _ id
	}

	set rs = ##class(%Library.ResultSet).%New()
	set st = rs.Prepare(sql)
	set st = rs.Execute()

	set c = 0
	while rs.Next()
	{
		set c = c + 1
		set id = rs.Get("ID")
		set feat = ##class(csd.Features).%OpenId(id)
		
		set text = feat.Body

		set pattern = "(https?:[\d]{0,5}\/\/(?:www\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]?\.[^\s]{2,}|www\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]?\.[^\s]{2,}|https?:[\d]{0,5}\/\/(?:www\.|(?!www))[a-zA-Z0-9]\.[^\s]{2,}|www\.[a-zA-Z0-9]\.[^\s]{2,})"
		set text = ##class(csd.Routines).parseTag(id, text, pattern, "|URL?|", ".")

		set pattern = "([a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+)"
		set text = ##class(csd.Routines).parseTag(id, text, pattern, "|EMAILADDRESS|")
		
		set pattern = "(((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))"
		set text = ##class(csd.Routines).parseTag(id, text, pattern, "|IPADDRESS|")
		
		set pattern = "(\b\(?([0-9]{3})\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})\b)"
		set text = ##class(csd.Routines).parseTag(id, text, pattern, "|PHONENO|")
			
		set pattern = "(\b(?:(?:31(\/|-|\.)(?:0?[13578]|1[02]|(?:Jan|Mar|May|Jul|Aug|Oct|Dec)))\1|(?:(?:29|30)(\/|-|\.)(?:0?[1,3-9]|1[0-2]|(?:Jan|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec))\2))(?:(?:1[6-9]|[2-9]\d)?\d{2})$|^(?:29(\/|-|\.)(?:0?2|(?:Feb))\3(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\d|2[0-8])(\/|-|\.)(?:(?:0?[1-9]|(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep))|(?:1[0-2]|(?:Oct|Nov|Dec)))\4(?:(?:1[6-9]|[2-9]\d)?\d{2})\b)"
		set text = ##class(csd.Routines).parseTag(id, text, pattern, "|DATE|")

		set feat.MessageTagged = text
		do feat.%Save()
		w !, c _ " " _ id					
	}
]]></Implementation>
</Method>

<Method name="parseTag">
<Description>
Execute the regular expression replacement </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%Integer,textIn:%String,regex:%String,tagIn:%String,ext:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set pattern = regex
	set text = textIn

	set matcher=##class(%Regex.Matcher).%New(pattern)
	do
	{
		set matcher.Text = text
		set tag = tagIn

		if (matcher.Locate())
		{
			set found = 1
			set url = matcher.SubstituteIn("$1")
			set ex = ""
			set end = ""
			
			if (ext = ".")
			{
				set end = $piece(url, "//", 2)
				if ((end [ "?") || (end [ "&") )
				{
				}
				elseif (end [ "/")
				{
					set end = $piece(end, "/", *) 
					set end = $piece(end, "<", 1)
					set end = $piece(end, ">", 1)
					set end = $piece(end, "[", 1)
					set end = $piece(end, "]", 1)
					set end = $piece(end, "#", 1)
					set end = $piece(end, "(", 1)
					set end = $piece(end, ")", 1)
					set end = $piece(end, ",", 1)
					set end = $piece(end, ";", 1)
					set end = $piece(end, """", 1)
					
					if ($length(end, ".") = 2)
					{
						set ex = $piece(end, ".", 2)
						set ex = $piece(ex, "?", 1)
					}
				}
				set tag = $replace(tag, "?", $zconvert(ex, "U"))
							
				//&sql(insert or update into csd.temp2 (urltype) values (:tag))
			}
			
			set text = $replace(text, url, tag)
			//w !, "********************"
			//w !, id, url _ "[" _ ex _ "]"
		}
		else
		{
			set found = 0
		}
	} while (found = 1)
	quit text
]]></Implementation>
</Method>

<Method name="KeepEmailOnly">
<Description>
Remove contacts from the data that are not email
Chat, ScannedDocs, Fax, VoiceMail  
do ##class(csd.Routines).KeepEmailOnly()</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	// Delete contacts that are not closed
	set sql = "select ID from cls.Contacts where Type->Textvalue <> 'Email'"
	set rs = ##class(%Library.ResultSet).%New()
	set st = rs.Prepare(sql)
	set st = rs.Execute()

	while rs.Next()
	{
		set id = rs.Get("ID")

		do ##class(server.Archive).deleteContact(id)
	}
]]></Implementation>
</Method>

<Method name="setArrivalTime">
<Description>
Prepare the arrival time feature. This is a discretized time into 24 one hour bins  </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String=""</FormalSpec>
<Implementation><![CDATA[
	set sql = "select ID from csd.Features "
	if (id '= "")
	{
		set sql = sql _ " where id = " _ id
	}

	set rs = ##class(%Library.ResultSet).%New()
	set st = rs.Prepare(sql)
	set st = rs.Execute()

	set c = 0
	while rs.Next()
	{
		set c = c + 1
		set id = rs.Get("ID")
		set feat = ##class(csd.Features).%OpenId(id)
		set contact = ##class(cls.Contact).%OpenId(feat.ContactID)
		set at = $piece($zdatetimeh(contact.ArrivalTime,3), ",", 2) \ 3600
		set feat.ArrivalTime = at
		set st = feat.%Save()
		w !, c _ " row:" _ id _ " contact:" _ feat.ContactID _ " time:" _ at _ " st:" _ st
	}
]]></Implementation>
</Method>

<Method name="parseW5">
<Description>
Prepare the w5 feature. This is a count of interrogation terms - who, what, when, why, where +</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>text:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	set w5 = 0
	set question = $listbuild("\bwho\b", "\bwhat\b", "\bwhen\b", "\bwhy\b", "\bwhere\b", "\bhow\b", "\bwhich\b", "\bwhichever\b", "\?")
	for i=1:1:$listlength(question)
	{
		set m=##class(%Regex.Matcher).%New($list(question,i) )
	    set m.Text = text
    	while m.Locate() {
			set w5 = w5 + 1
		}
	}
	return w5
]]></Implementation>
</Method>

<Method name="parseFollowUp">
<Description>
Prepare the FollowUp feature. This indicates if this is an interaction in an ongoing converstaion</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>text:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	set followUp = 0
	set pattern = "(\[\<.+\>\]$)$"
	set matcher=##class(%Regex.Matcher).%New(pattern)
	set matcher.Text = text
	if (matcher.Locate())
	{
		set followUp = 1
	}
	quit followUp
]]></Implementation>
</Method>

<Method name="parseMailbox">
<Description>
Prepare the Mailbox feature. 
Find the mailbox from a longer list of recipients in the toaddress</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>toAddress:%String</FormalSpec>
<Implementation><![CDATA[
	set mailbox = toAddress
	&sql(
	    select name _ '@' _ domainname as mailbox
    	into :sqlMailbox
    	from cls.Inboxes
    	where :toAddress like '%' _ name _ '@' _ domainname _ '%'
	)
	
	if (SQLCODE = 0)
	{
		set mailbox = sqlMailbox
	}
	
	quit mailbox
]]></Implementation>
</Method>

<Method name="mailAddressCount">
<Description>
Count the number of recipients on the recipient list</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>mailAddress:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	if (mailAddress = "")
	{
		quit 0
	}
	quit $length(mailAddress, ";")
]]></Implementation>
</Method>

<Method name="countAttachments">
<Description>
Count the number of attachments on the message
do ##class(csd.Routines).countAttachments()</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id=""</FormalSpec>
<Implementation><![CDATA[
	set sql = "select ID from csd.Features"
	if (id '= "")
	{
		set sql = sql _ " where id = " _ id
	}

	set rs = ##class(%Library.ResultSet).%New()
	set st = rs.Prepare(sql)
	set st = rs.Execute()

	set c = 0
	while rs.Next()
	{
		set c = c + 1
		set id = rs.Get("ID")
		set feat = ##class(csd.Features).%OpenId(id)
		set contact = ##class(cls.Contact).%OpenId(feat.ContactID)
		
		set feat.AttachmentCount = 0
		for i=1:1:contact.Actions.Count()
		{
			set action = contact.Actions.GetAt(i)
			if (action.Source.TextValue = "EMail from Customer")
			{
				set feat.AttachmentCount = action.Attachments.Count()
			}
		}
		do feat.%Save()
		w !, c _ " " _ id					
	}
]]></Implementation>
</Method>

<Method name="setImportance">
<Description>
Set the importance feature from the email property
do ##class(csd.Routines).setImportance()</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id=""</FormalSpec>
<Implementation><![CDATA[
	set sql = "select ID from csd.Features"
	if (id '= "")
	{
		set sql = sql _ " where id = " _ id
	}

	set rs = ##class(%Library.ResultSet).%New()
	set st = rs.Prepare(sql)
	set st = rs.Execute()

	set c = 0
	while rs.Next()
	{
		set c = c + 1
		set id = rs.Get("ID")
		set feat = ##class(csd.Features).%OpenId(id)
		set contact = ##class(cls.Contact).%OpenId(feat.ContactID)
		
		set feat.Importance = contact.Importance
		do feat.%Save()
		w !, c _ " " _ id					
	}
]]></Implementation>
</Method>

<Method name="tagMailbox">
<Description>
Replace the mailbox entity
do ##class(csd.Routines).tagMailbox()</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id=""</FormalSpec>
<Implementation><![CDATA[
	set sql = "select ID from csd.Features"
	if (id '= "")
	{
		set sql = sql _ " where id = " _ id
	}

	set rs = ##class(%Library.ResultSet).%New()
	set st = rs.Prepare(sql)
	set st = rs.Execute()

	set c = 0
	while rs.Next()
	{
		set c = c + 1
		set id = rs.Get("ID")
		set feat = ##class(csd.Features).%OpenId(id)
		if ($length(feat.Mailbox) > 5)
		{
			set feat.MessageCleanTagged = $replace(feat.MessageCleanTagged, feat.Mailbox, "|mailbox|")
			set feat.MessageTagged = $replace(feat.MessageTagged, feat.Mailbox, "|mailbox|")
			do feat.%Save()
		}
		w !, c _ " " _ id					
	}
]]></Implementation>
</Method>
</Class>


<Class name="csd.WSFeature">
<Super>%RegisteredObject,%XML.Adaptor</Super>
<TimeChanged>64886,63183.607297</TimeChanged>
<TimeCreated>64833,73765.573558</TimeCreated>

<Property name="Mailbox">
<Description>
POJO type class representing the features</Description>
<Type>%String</Type>
<Parameter name="COLLATION" value="SQLUPPER(255)"/>
<Parameter name="MAXLEN" value="255"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Subject">
<Type>%String</Type>
<Parameter name="COLLATION" value="SQLUPPER(255)"/>
<Parameter name="MAXLEN" value="255"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="Body">
<Type>%String</Type>
<Parameter name="COLLATION" value="SQLUPPER(255)"/>
<Parameter name="MAXLEN" value="4000"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="MessageCleanTagged">
<Type>%String</Type>
<Parameter name="COLLATION" value="SQLUPPER(255)"/>
<Parameter name="MAXLEN" value="4000"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Property name="FollowUp">
<Type>%Integer</Type>
</Property>

<Property name="MailToCount">
<Type>%Integer</Type>
</Property>

<Property name="MailCCCount">
<Type>%Integer</Type>
</Property>

<Property name="W5">
<Type>%Integer</Type>
</Property>

<Property name="ArrivalTime">
<Type>%Integer</Type>
</Property>

<Property name="Length">
<Type>%Integer</Type>
</Property>
</Class>


<Class name="csd.WSService">
<ClassType/>
<ProcedureBlock>1</ProcedureBlock>
<Super>%SOAP.WebService</Super>
<TimeChanged>64886,63139.163112</TimeChanged>
<TimeCreated>64833,73619.888082</TimeCreated>

<Parameter name="SERVICENAME">
<Default>CSD</Default>
</Parameter>

<Parameter name="NAMESPACE">
<Default>http://ws.nuig.csd</Default>
</Parameter>

<Method name="GetFeature">
<Description>
WebMethod to convert the email properties to the expected
format to use with the prediction model</Description>
<FormalSpec>toAddress:%String,ccAddress:%String,subject:%String,mailbody:%String</FormalSpec>
<ReturnType>csd.WSFeature</ReturnType>
<WebMethod>1</WebMethod>
<Implementation><![CDATA[
	set result = ##class(csd.WSFeature).%New()
	set id = 0
	
	do ##class(server.Diagnostics).WriteLn(0, toAddress, "C:\tmp\trace.log")
	do ##class(server.Diagnostics).WriteLn(0, ccAddress, "C:\tmp\trace.log")
	do ##class(server.Diagnostics).WriteLn(0, subject, "C:\tmp\trace.log")
	do ##class(server.Diagnostics).WriteLn(0, mailbody, "C:\tmp\trace.log")
	
	set x = 0
	set text = ##class(csd.Routines).parseFeature(toAddress, mailbody, .x)
	do ##class(server.Diagnostics).WriteLn(0, x, "C:\tmp\trace.log")
	if (x = 0)
	{
		set text = mailbody
	}
	
	set pattern = "(https?:[\d]{0,5}\/\/(?:www\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]?\.[^\s]{2,}|www\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]?\.[^\s]{2,}|https?:[\d]{0,5}\/\/(?:www\.|(?!www))[a-zA-Z0-9]\.[^\s]{2,}|www\.[a-zA-Z0-9]\.[^\s]{2,})"
	set text = ##class(csd.Routines).parseTag(id, text, pattern, "|URL?|", ".")

	set pattern = "([a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+)"
	set text = ##class(csd.Routines).parseTag(id, text, pattern, "|EMAILADDRESS|")
	
	set pattern = "(((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))"
	set text = ##class(csd.Routines).parseTag(id, text, pattern, "|IPADDRESS|")
	
	set pattern = "(\b\(?([0-9]{3})\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})\b)"
	set text = ##class(csd.Routines).parseTag(id, text, pattern, "|PHONENO|")
	do ##class(server.Diagnostics).WriteLn(0, text, "C:\tmp\trace.log")

	set followUp = ##class(csd.Routines).parseFollowUp(text)
	set w5 = ##class(csd.Routines).parseW5(text)
	set mailbox = ##class(csd.Routines).parseMailbox(toAddress)
	set mailToCount = ##class(csd.Routines).mailAddressCount(toAddress)
	set mailCcCount = ##class(csd.Routines).mailAddressCount(ccAddress)
	set arrivalTime = $piece($horolog,",",2) \ (3600)
	set length = $length(text)
	
	do ##class(server.Diagnostics).WriteLn(0, followUp, "C:\tmp\trace.log")
	do ##class(server.Diagnostics).WriteLn(0, mailbox, "C:\tmp\trace.log")
	do ##class(server.Diagnostics).WriteLn(0, mailCcCount, "C:\tmp\trace.log")
	do ##class(server.Diagnostics).WriteLn(0, mailToCount, "C:\tmp\trace.log")
	do ##class(server.Diagnostics).WriteLn(0, text, "C:\tmp\trace.log")
	do ##class(server.Diagnostics).WriteLn(0, arrivalTime, "C:\tmp\trace.log")
	do ##class(server.Diagnostics).WriteLn(0, w5, "C:\tmp\trace.log")
	do ##class(server.Diagnostics).WriteLn(0, length, "C:\tmp\trace.log")

	set result.Body = mailbody
	set result.FollowUp = followUp
	set result.Mailbox = mailbox
	set result.MailToCount = mailToCount
	set result.MailCCCount = mailCcCount
	set result.MessageCleanTagged = text
	set result.Subject = subject
	set result.ArrivalTime = arrivalTime
	set result.W5 = w5
	set result.Length = length

	do ##class(server.Diagnostics).WriteLn(0, "OK2", "C:\tmp\trace.log")
	
	quit result
]]></Implementation>
</Method>
</Class>
</Export>
